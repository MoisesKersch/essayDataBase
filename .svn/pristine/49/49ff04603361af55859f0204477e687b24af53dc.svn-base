package br.com.adaptaconsultoria.amr.manager;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import br.com.adaptaconsultoria.amr.builder.EMailBuilder;
import br.com.adaptaconsultoria.amr.model.Cadastro;
import br.com.adaptaconsultoria.amr.model.EMail;
import br.com.adaptaconsultoria.amr.model.Endereco;
import br.com.adaptaconsultoria.amr.model.ParceiroNegocios;
import br.com.adaptaconsultoria.amr.model.ParceiroNegociosEndereco;
import br.com.adaptaconsultoria.amr.model.ServidorEMail;
import br.com.adaptaconsultoria.amr.model.Usuario;
import br.com.adaptaconsultoria.amr.persistence.DaoFactory;
import br.com.adaptaconsultoria.amr.util.FormatUtilities;
import br.com.adaptaconsultoria.amr.util.SenhaUtil;

/**
 *
 *
 * @author Will Zaniol
 * @author www.adaptaconsultoria.com.br
 * @version 1.0.0
 *
 */
public class UsuarioManager {

	public Usuario login(String login, String senha) throws Exception {

		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorLogin(login.toUpperCase());
		if (usuario == null)
			throw new Exception("Nenhum usuário com esse login foi encontrado no sistema");

		if (!usuario.getSenha().equals(FormatUtilities.sha1Base64(senha)))
			throw new Exception("Senha incorreta!");

		return usuario;
	}

	public void alteraSenha(String adUserId, String senhaAtual, String senhaNova) throws Exception {

		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorId(adUserId);
		if (usuario == null)
			throw new Exception("Nenhum usuário com esse login foi encontrado no sistema");

		if (!usuario.getSenha().equals(FormatUtilities.sha1Base64(senhaAtual)))
			throw new Exception("Senha atual incorreta!");

		usuario.setSenha(FormatUtilities.sha1Base64(senhaNova));
		DaoFactory.getInstance().getUsuarioDao().atualiza(usuario);
	}

	public void alteraSenhaFinanceira(String adUserId, String senhaAtual, String senhaNova) throws Exception {

		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorId(adUserId);
		if (usuario == null)
			throw new Exception("Nenhum usuário com esse login foi encontrado no sistema");

		if (usuario.getSenhaFinanceira() != null && !usuario.getSenhaFinanceira().isEmpty()) {
			if (!usuario.getSenhaFinanceira().equals(FormatUtilities.sha1Base64(senhaAtual)))
				throw new Exception("Senha atual incorreta!");
		}

		usuario.setSenhaFinanceira(FormatUtilities.sha1Base64(senhaNova));
		DaoFactory.getInstance().getUsuarioDao().atualiza(usuario);
	}

	public Cadastro criaCadastroDeParceiroDeNegocios(String id) throws Exception {
		Cadastro cadastro = new Cadastro();

		ParceiroNegocios parceiroNegocios = DaoFactory.getInstance().getParceiroNegociosDao().carregaPorId(id);
		if (parceiroNegocios == null)
			throw new Exception("Nenhum parceiro de negócios com esse ID: " + id + " foi encontrado.");

		cadastro.setcBPartnerId(id);
		cadastro.setNome(parceiroNegocios.getNome());
		cadastro.setCpfCnpj(parceiroNegocios.getCnpj());
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		try {
			cadastro.setDataNascimento(dateFormat.format(parceiroNegocios.getDataNascimento()));
		} catch (Exception e) {
		}
		cadastro.setEmail(parceiroNegocios.getEmail());

		cadastro.setTipoTelefone1(parceiroNegocios.getCelularTipoTelefone());
		cadastro.setDddTelefone1(parceiroNegocios.getCelularDDD());
		cadastro.setNumeroTelefone1(parceiroNegocios.getCelularNumero());
		cadastro.setOperadoraTelefone1(parceiroNegocios.getCelularOperadora());

		cadastro.setBanco(parceiroNegocios.getBancoID());
		cadastro.setAgencia(parceiroNegocios.getAgencia());
		cadastro.setConta(parceiroNegocios.getConta());
		cadastro.setContaDV(parceiroNegocios.getContaDV());
		cadastro.setGenero(parceiroNegocios.getGenero());

		List<ParceiroNegociosEndereco> parceiroNegociosEndereco = DaoFactory.getInstance().getParceiroNegociosEnderecoDao().listaPorParceiroNegocios(id);
		if (parceiroNegociosEndereco != null && !parceiroNegociosEndereco.isEmpty()) {
			cadastro.setcBPartnerLocationId(parceiroNegociosEndereco.get(0).getId());
			cadastro.setTipoTelefone2(parceiroNegociosEndereco.get(0).getTipoTelefone());
			cadastro.setDddTelefone2(parceiroNegociosEndereco.get(0).getDdd() != null ? String.valueOf(parceiroNegociosEndereco.get(0).getDdd()) : "");
			cadastro.setNumeroTelefone2(parceiroNegociosEndereco.get(0).getTelefone());
			cadastro.setReferencia(parceiroNegociosEndereco.get(0).getReferencia());

			List<Endereco> enderecos = DaoFactory.getInstance().getEnderecoDao().listaPorParceiroNegocios(id);
			if (enderecos != null && !enderecos.isEmpty()) {
				cadastro.setcLocationId(enderecos.get(0).getId());
				cadastro.setCep(enderecos.get(0).getCep());
				cadastro.setRua(enderecos.get(0).getLogradouro());
				cadastro.setNumero(enderecos.get(0).getNumero());
				cadastro.setBairro(enderecos.get(0).getBairro());
				cadastro.setCidade(enderecos.get(0).getCidade());
				cadastro.setEstado(enderecos.get(0).getEstado());
				cadastro.setComplemento(enderecos.get(0).getComplemento());
			}
		}

		cadastro.setTipoTelefone3(parceiroNegocios.getOutroTipoTelefone());
		cadastro.setDddTelefone3(parceiroNegocios.getOutroDDD());
		cadastro.setNumeroTelefone3(parceiroNegocios.getOutroTelefone());
		cadastro.setOperadoraTelefone3(parceiroNegocios.getOutroOperadora());

		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorParceiroNegocios(id);
		if (usuario != null) {
			cadastro.setAdUserId(usuario.getId());
			cadastro.setUsuario(usuario.getLogin().toUpperCase());
			cadastro.setSenha(usuario.getSenha());
			cadastro.setCrescimento(usuario.getCrescimento());
		}

		return cadastro;
	}

	public void salvaMeuCadastro(Cadastro cadastro) throws Exception {

		salvaParceiroDeNegocios(cadastro, true);
		salvaUsuario(cadastro, true);
		salvaEndereco(cadastro);

	}

	public void salvaCadastroPendente(Cadastro cadastro) throws Exception {

		salvaParceiroDeNegocios(cadastro, false);
		salvaUsuario(cadastro, false);
		salvaEndereco(cadastro);

	}

	private void salvaEndereco(Cadastro cadastro) throws Exception {

		ParceiroNegociosEndereco endereco = DaoFactory.getInstance().getParceiroNegociosEnderecoDao().carregaPorId(cadastro.getcBPartnerLocationId());
		if (endereco != null) {

			endereco.setTipoTelefone(cadastro.getTipoTelefone2());
			endereco.setDdd(cadastro.getDddTelefone2() != null && !cadastro.getDddTelefone2().isEmpty() ? Integer.parseInt(cadastro.getDddTelefone2()) : null);
			endereco.setTelefone(cadastro.getNumeroTelefone2());
			endereco.setReferencia(cadastro.getReferencia());
			DaoFactory.getInstance().getParceiroNegociosEnderecoDao().atualiza(endereco);
		}

		Endereco localizacao = DaoFactory.getInstance().getEnderecoDao().carregaPorId(cadastro.getcLocationId());
		if (localizacao != null) {

			localizacao.setCep(cadastro.getCep());
			localizacao.setLogradouro(cadastro.getRua());
			localizacao.setNumero(cadastro.getNumero());
			localizacao.setBairro(cadastro.getBairro());
			localizacao.setCidade(cadastro.getCidade());
			localizacao.setEstado(cadastro.getEstado());
			localizacao.setComplemento(cadastro.getComplemento());
			DaoFactory.getInstance().getEnderecoDao().atualiza(localizacao);
		}

	}

	private void salvaUsuario(Cadastro cadastro, boolean meuCadastro) throws Exception {
		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorId(cadastro.getAdUserId());
		if (usuario != null) {

			if (meuCadastro) {
				usuario.setCrescimento(cadastro.getCrescimento());
			}

			else {
				if (cadastro.getSenha() != null && !cadastro.getSenha().isEmpty() && !cadastro.getSenha().equals(usuario.getSenha())) {
					usuario.setSenha(FormatUtilities.sha1Base64(cadastro.getSenha()));
				}
				usuario.setLogin(cadastro.getUsuario().toUpperCase());
				usuario.setNome(cadastro.getNome());
			}

			DaoFactory.getInstance().getUsuarioDao().atualiza(usuario);
		}
	}

	private void salvaParceiroDeNegocios(Cadastro cadastro, boolean salvaDadosBancarios) throws Exception {

		ParceiroNegocios parceiroNegocios = DaoFactory.getInstance().getParceiroNegociosDao().carregaPorId(cadastro.getcBPartnerId());
		if (parceiroNegocios == null)
			throw new Exception("Nenhum parceiro de negócios com esse ID: " + cadastro.getcBPartnerId() + " foi encontrado.");

		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		parceiroNegocios.setNome(cadastro.getNome());
		parceiroNegocios.setCnpj(cadastro.getCpfCnpj());
		parceiroNegocios.setDataNascimento(dateFormat.parse(cadastro.getDataNascimento()));
		parceiroNegocios.setEmail(cadastro.getEmail());
		parceiroNegocios.setCelularTipoTelefone(cadastro.getTipoTelefone1());
		parceiroNegocios.setCelularDDD(cadastro.getDddTelefone1());
		parceiroNegocios.setCelularNumero(cadastro.getNumeroTelefone1());
		parceiroNegocios.setCelularOperadora(cadastro.getOperadoraTelefone1());
		parceiroNegocios.setOutroTipoTelefone(cadastro.getTipoTelefone3());
		parceiroNegocios.setOutroDDD(cadastro.getDddTelefone3());
		parceiroNegocios.setOutroTelefone(cadastro.getNumeroTelefone3());
		parceiroNegocios.setOutroOperadora(cadastro.getOperadoraTelefone3());
		parceiroNegocios.setGenero(cadastro.getGenero());

		if (salvaDadosBancarios) {
			parceiroNegocios.setBancoID(cadastro.getBanco());
			parceiroNegocios.setAgencia(cadastro.getAgencia());
			parceiroNegocios.setConta(cadastro.getConta());
			parceiroNegocios.setContaDV(cadastro.getContaDV());
		}

		DaoFactory.getInstance().getParceiroNegociosDao().atualiza(parceiroNegocios);
	}

	public void pagaCadastroPendente(String adUserId, Cadastro cadastro) throws Exception {

		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorId(adUserId);
		if (usuario == null)
			throw new Exception("Nenhum registro de usuario com o id de sessão encontrado no banco de dados");

		if (usuario.getSenhaFinanceira() == null || usuario.getSenhaFinanceira().isEmpty())
			throw new Exception("Senha financeira não confere");

		if (!usuario.getSenhaFinanceira().equals(FormatUtilities.sha1Base64(cadastro.getSenhaFinanceira())))
			throw new Exception("Senha financeira não confere");

		DaoFactory.getInstance().getCadastroPendenteDao().paga(cadastro.getAdUserId());
	}

	public void redefineSenhaEEnviaPorEMail(String destinatario) throws Exception {

		String senha = SenhaUtil.criaSenhaCom20Caracteres();
		Usuario usuario = DaoFactory.getInstance().getUsuarioDao().carregaPorEMail(destinatario);
		if (usuario == null)
			throw new Exception("Nenhum usuário com esse e-mail foi encontrado.");

		usuario.setSenha(FormatUtilities.sha1Base64(senha));
		DaoFactory.getInstance().getUsuarioDao().salva(usuario);

		ServidorEMail servidor = EMailBuilder.criaServidorPorProperties();

		EMail email = new EMail();
		email.setServidor(servidor);
		email.setAssunto("Backoffice - Redefinição de senha");
		email.setMensagem(EMailBuilder.criaMensagemEsqueciMinhaSenha(usuario.getLogin(), senha));
		email.addDestinatario(destinatario);
		email.setHtml(true);
		email.envia();
	}

	public static void main(String[] args) {
		UsuarioManager manager = new UsuarioManager();

		try {
			manager.criaCadastroDeParceiroDeNegocios("025DE3CC1DD44C7799AD42556FDD2BC6");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}