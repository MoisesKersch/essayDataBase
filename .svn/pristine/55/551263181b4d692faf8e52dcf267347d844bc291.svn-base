package br.com.adaptaconsultoria.amr.springmvc.controller;

import static org.springframework.web.bind.annotation.RequestMethod.GET;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import br.com.adaptaconsultoria.amr.model.Extrato;
import br.com.adaptaconsultoria.amr.model.FiltroExtrato;
import br.com.adaptaconsultoria.amr.model.Financeiro;
import br.com.adaptaconsultoria.amr.model.SaldoResumido;
import br.com.adaptaconsultoria.amr.persistence.DaoFactory;
import br.com.adaptaconsultoria.amr.springmvc.util.SessionUtil;

/**
 *
 * @author Will Zaniol
 * @author www.adaptaconsultoria.com.br
 * @version 1.0.0
 *
 */
@Controller
@Scope("session")
public class SaldoController {

	@RequestMapping(value = "/saldoresumido", method = GET)
	public ModelAndView saldoResumido(HttpSession session) {
		SessionUtil.setSubMenuAtivo(session, "saldoresumido");
		List<SaldoResumido> lista = new ArrayList<SaldoResumido>();
		try {
			lista = DaoFactory.getInstance().getSaldoResumidoDao().carregaPorUsuario(SessionUtil.getUsuarioId(session));
		} catch (Exception e) {
			e.printStackTrace();
		}
		ModelAndView model = new ModelAndView("saldoresumido", "lista", lista);
		return model;
	}

	@RequestMapping(value = "/extratoperiodo", method = GET)
	public ModelAndView extratoPorPeriodo(HttpSession session) throws ParseException {
		SessionUtil.setSubMenuAtivo(session, "extratoperiodo");

		List<Extrato> abas = new ArrayList<Extrato>();
		try {
			abas = DaoFactory.getInstance().getExtratoDao().carregaPorUsuario(SessionUtil.getUsuarioId(session), null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}

		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String hoje = dateFormat.format(new Date());

		FiltroExtrato filtro = new FiltroExtrato();
		filtro.setDataInicial(dateFormat.parse("01" + hoje.substring(2, hoje.length())));
		filtro.setDataFinal(new Date());
		ModelAndView model = new ModelAndView("extratoperiodo", "filtro", filtro);
		model.addObject("abas", abas);

		model.addObject("dataInical", "01" + hoje.substring(2, hoje.length()));
		model.addObject("dataFinal", hoje);
		return model;
	}

	@RequestMapping(value = "/extratoperiodoabas/{dataInicial}&{dataFinal}&{mes}", method = GET)
	public ModelAndView extratoPorPeriodoAbas(@PathVariable String dataInicial, @PathVariable String dataFinal, @PathVariable String mes, HttpSession session) {

		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		mes = mes.replaceAll("-", "/");

		ModelAndView model = new ModelAndView("extratoperiodoabas");

		List<Extrato> abas = new ArrayList<Extrato>();
		try {

			if (dataInicial == null || dataInicial.isEmpty())
				dataInicial = "01-01-2010";

			if (dataFinal == null || dataFinal.isEmpty())
				dataFinal = "01-01-2020";

			abas = DaoFactory.getInstance().getExtratoDao()
					.carregaPorUsuario(SessionUtil.getUsuarioId(session), dateFormat.parse(dataInicial), dateFormat.parse(dataFinal));
			model.addObject("abas", abas);

			if (mes.equalsIgnoreCase("primeiro"))
				mes = abas.get(0).getTitulo();

			if (abas != null) {
				for (int i = 0; i < abas.size(); i++) {
					if (mes.equalsIgnoreCase(abas.get(i).getTitulo())) {
						model.addObject("aba", abas.get(i).getTitulo());
						model.addObject("total", abas.get(i).getSaldo());

						List<Financeiro> linhasNovas = new ArrayList<Financeiro>();

						try {
							List<Financeiro> linhas = DaoFactory
									.getInstance()
									.getFinanceiroDao()
									.carregaPorUsuarioMesEAno(SessionUtil.getUsuarioId(session), abas.get(i).getMes(), abas.get(i).getAno(),
											dateFormat.parse(dataInicial), dateFormat.parse(dataFinal));

							linhasNovas = new ArrayList<Financeiro>();
							Financeiro financeiroAnterior = null;
							Financeiro financeiro = null;

							Financeiro saldoInicial = new Financeiro();
							saldoInicial.setVencimento(linhas.get(0).getVencimento());
							saldoInicial.setHistorico("Saldo inicial do dia");
							saldoInicial.setValor(linhas.get(0).getSaldoInicial());
							saldoInicial.setLinha("T");
							linhasNovas.add(saldoInicial);

							if (linhas != null && !linhas.isEmpty()) {

								for (int j = 0; j < linhas.size(); j++) {
									financeiro = linhas.get(j);

									if (financeiroAnterior != null && !financeiroAnterior.getVencimento().equals(financeiro.getVencimento())) {
										saldoInicial = new Financeiro();
										saldoInicial.setVencimento(financeiro.getVencimento());
										saldoInicial.setHistorico("Saldo inicial do dia");
										saldoInicial.setValor(financeiro.getSaldoInicial());
										saldoInicial.setLinha("T");
										linhasNovas.add(saldoInicial);
									}

									linhasNovas.add(financeiro);
									financeiroAnterior = linhas.get(j);
								}
							}

						} catch (Exception e) {
							e.printStackTrace();
						}
						model.addObject("linhas", linhasNovas);

						break;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return model;
	}

}